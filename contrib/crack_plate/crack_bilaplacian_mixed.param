% Copyright (C) 2017-2020 Yves Renard.
%
% This file is a part of GetFEM++
%
% GetFEM++  is  free software;  you  can  redistribute  it  and/or modify it
% under  the  terms  of the  GNU  Lesser General Public License as published
% by  the  Free Software Foundation;  either version 3 of the License,  or
% (at your option) any later version along with the GCC Runtime Library
% Exception either version 3.1 or (at your option) any later version.
% This program  is  distributed  in  the  hope  that it will be useful,  but
% WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
% or  FITNESS  FOR  A PARTICULAR PURPOSE.  See the GNU Lesser General Public
% License and GCC Runtime Library Exception for more details.
% You  should  have received a copy of the GNU Lesser General Public License
% along  with  this program;  if not, write to the Free Software Foundation,
% Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
% -*- matlab -*- (enables emacs matlab mode)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% parameters for program bilaplacian                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% Parameters for the plate   
KL = 1;        % 0 for pure bilaplacian problem or 1 for Kirchhoff-Love
               % plate model (N=2 only).
if (KL)        % For Kirchhoff-Love plate model only
  NU = 0.3 ; % Poisson ratio (0 <= NU <= 1)
end;

%%%%% Choice of the solution of reference ----------------------------
SOL_REF = 0 ;  % 0 = the exact solution is taken equal to the singularities 
               % 1 = plate subject to bending moments (only the SIF is known)
               % 2 = panel test case (no exact solution)
PI = 3.14159265 ;
%ANGLE_ROT = 9. * PI / 10.  ;
ANGLE_ROT = PI / 6 ;

%%%%%  domain parameters                   %%%%%
N = 2;
CRACK_SEMI_LENGTH = 0.11 ; %% only useful if SOL_REF = 1 or 2
if SOL_REF == 0
   LX = 1. ; LY = LX; LZ = LX;	% sizes of the domain.
   EPSILON=0.045 ; % thickness 
   D = 1 ;         % "flexion modulus"
elseif SOL_REF == 1
   LX = 0.5; LY = 1.0; LZ = LY;
   EPSILON=0.045 % thickness 
   D = 1 ;       % "flexion modulus"
elseif SOL_REF == 2
   LX = 1.5 ; LY = 1.0; LZ = LY;
   E = 7.4e10 ;
   EPSILON=8e-4 ;
   D = 2 * E * EPSILON * EPSILON * EPSILON / (3 * (1 - NU * NU)) ;       % "flexion modulus"
   PRESSURE = 6e4  ; NY = 11 ; 
end;


%%%%%   mesh parameters -----------------------------------------------
MESH_NOISED = 1;        % Set to one if you want to "shake" the mesh
MIXED_ELEMENTS = 1 ;    % Set to one if you want to insert triangles in quadrangles meshes
NX = 15;                 % space step
%MESH_FILE='/home-local/jlasry/RESULTATS_XFEM/KL/MAILLAGES_MATLAB/tri_10.mesh'
%MESH_FILE='./demi_plaque_raffinee.mesh'
%MESH_FILE='./demi_plaque.mesh'
%MESH_FILE='./zehnder_2.mesh'

TRANSLAT_X = 0.0 ;
TRANSLAT_Y = 0.0 ;


closing_version = 0 ;
EPS_CLOSING_PENAL = 1e-12 ;
	

% Parameters for moving pathological nodes that are located very close 
% to the fracture.
MOVE_NODES = 0. ;  % set to 0 if you don't want to move the nodes
SEUIL_MOVE = 0. ;  % distance to the crack the node will be set
SEUIL_SELECT = 0.3 / NX   ;  % distance to the crack under which a node
                           % is considered "pathological
SEUIL_FINAL =  0 ;
SHOW_NAME_OF_DOF = 0 ;

% Parameters for the finite element method -------------------------------

QUAD = 1;
 

  TRI_MESH_TYPE = 'GT_PK(2,1)';        % triangles
% TRI_INTEGRATION = 'IM_TRIANGLE(13)'; % quadrature of order 10 on triangles
% TRI_INTEGRATION = 'IM_STRUCTURED_COMPOSITE(IM_TRIANGLE(10), 3)';
  TRI_DATA_FEM_TYPE = 'FEM_PK(2, 5)';
  TRI_PARTITION_OF_UNITY_FEM_TYPE = 'FEM_REDUCED_HCT_TRIANGLE';
  if 0   % hermite element
     TRI_FEM_TYPE = 'FEM_PK(2,1)'; %HERMITE(2)';   % not conformal -> problem
     TRI_DIRICHLET_FEM_TYPE = 'FEM_PK(2,3)';
  elseif 0  % argyris element
     TRI_FEM_TYPE = 'FEM_ARGYRIS';
     TRI_INTEGRATION = 'IM_TRIANGLE(13)';
     TRI_DIRICHLET_FEM_TYPE = 'FEM_PK(2,3)';
  else
%    TRI_FEM_TYPE = 'FEM_HCT_TRIANGLE';
     TRI_FEM_TYPE = 'FEM_REDUCED_HCT_TRIANGLE';
%     TRI_FEM_TYPE = 'FEM_ARGYRIS' ; DIRICHLET_FEM_TYPE = 'FEM_PK(2,5)';
     TRI_DIRICHLET_FEM_TYPE = 'FEM_PK(2,2)';
%     TRI_DIRICHLET_FEM_TYPE = 'FEM_REDUCED_HCT_TRIANGLE' ;    
     TRI_DIRICHLET_DER_FEM_TYPE = 'FEM_PK(2,1)';
   % TRI_INTEGRATION = 'IM_STRUCTURED_COMPOSITE(IM_TRIANGLE(5), 3)';
     TRI_INTEGRATION = 'IM_HCT_COMPOSITE(IM_TRIANGLE(13))';
 %    TRI_MORTAR_FEM_TYPE = 'FEM_REDUCED_HCT_TRIANGLE';    
    TRI_MORTAR_FEM_TYPE ='FEM_PK(2,2)';
   %  TRI_MORTAR_FEM_TYPE = 'FEM_HERMITE(2)';
     TRI_MORTAR_DERIV_FEM_TYPE = 'FEM_PK(2,1)';
%    TRI_MORTAR_DERIV_FEM_TYPE = 'FEM_REDUCED_HCT_TRIANGLE';
TRI_INTEGRATION_LINE = 'IM_TRIANGLE(13)' ;
TRI_SIMPLEX_INTEGRATION_LINE = 'IM_STRUCTURED_COMPOSITE(IM_TRIANGLE(6),2)';
  end;



  QUAD_MESH_TYPE = 'GT_QK(2,1)';
  QUAD_FEM_TYPE = 'FEM_REDUCED_QUADC1_COMPOSITE'; 
  %QUAD_FEM_TYPE = 'FEM_QUADC1_COMPOSITE';  
  QUAD_DATA_FEM_TYPE = 'FEM_QK(2,5)';
  QUAD_DIRICHLET_FEM_TYPE = 'FEM_QK(2,2)';
  QUAD_DIRICHLET_DER_FEM_TYPE = 'FEM_QK(2,1)';
  % QUAD_MORTAR_FEM_TYPE = 'FEM_REDUCED_QUADC1_COMPOSITE';
  QUAD_MORTAR_FEM_TYPE = 'FEM_QK(2,2)' ;
  QUAD_MORTAR_DERIV_FEM_TYPE = 'FEM_QK(2,1)' ;
  %QUAD_MORTAR_DERIV_FEM_TYPE = 'FEM_QK_DISCONTINUOUS(2,1)';
  QUAD_PARTITION_OF_UNITY_FEM_TYPE = 'FEM_REDUCED_QUADC1_COMPOSITE';
  QUAD_INTEGRATION = 'IM_QUADC1_COMPOSITE(IM_TRIANGLE(13))';
  QUAD_INTEGRATION_LINE = 'IM_QUAD(17)' ;
  QUAD_SIMPLEX_INTEGRATION_LINE = 'IM_QUAD(17)';

% integration meth. for sub-simplexe of elements crossed by the level-set
SIMPLEX_INTEGRATION = 'IM_STRUCTURED_COMPOSITE(IM_TRIANGLE(13),3)';

% integration meth. for quasi-polar integration of sub-simplexes adjascent to the level-set
% (comment it to disable quasipolar integration). Should be a
% method defined on a square for 2D, or defined on a prism for 3D.
% SINGULAR_INTEGRATION = 'IM_GAUSS_PARALLELEPIPED(2, 10)';
SINGULAR_INTEGRATION = 'IM_STRUCTURED_COMPOSITE(IM_GAUSS_PARALLELEPIPED(2, 13), 9)';

WHERE = 4 ;

%%%% XFEM Parameters

ENRICHMENT_OPTION = 3;  % 0 = Pas d'enrichissement	
                        % 1 = Pointwise matching
                        % 2 = standard XFEM on a fixed zone
			% 3 = Integral matching (mortar)			
RADIUS_ENR_AREA = 0.15 ;
RING_RADIUS = 0.12 ;
FIC_SERIE = 0 ;
MIN_RJ = 0.158 ;
DELTA_RJ = 0.001 ;
NB_RJ = 5 ;
SING_BASE_TYPE = 0 ;    % 0 = singularities developped on 4 dofs
                        % 1 = singularities developped on 2 dofs
SHOW_DX = 0 ;


%%%%%    Parameters for the integral matching
MULT_WITH_H = 1 ;           % 0 = mutlipliers without the H ddl ; 1 = multipliers with the H ddls
MORTAR_WITHOUT_SINGUL = 0 ; % 0 = mortar with singuls ; 1 = mortar without singuls
MORTAR_TYPE = 3 ;         % 1 = version 1 of the integral matching
                          % 2 = entire gradient matched
                          % 3 = normal derivative only
MORTAR_VERSION = 0 ;    % 0=multipliers, 1=penalization, 2=elimination
EPS_MORTAR_PENAL = 1E-9;      % parameter for treating the
                               % integral matching with penalization 
SEUIL = 1e-26 ;    % threshold for elimination of dofs at the end of the integral matching

%%%%%    Parameters for the cut-off function
CUTOFF_FUNC = 3; % 0 for the exponential cutoff. 
                 % 1 for a 3rd degree polynomial cutoff.
                 % 2 for a 5th degree polynomial cutoff. 
CUTOFF = 0.4;  % useful only for exponential cutoff (parameter of the speed of decreasing)
CUTOFF1 = 0.01; % radius
CUTOFF0 = 0.25;

%%%%%  computation parameters 
RESIDUAL = 1E-9;     	% residual for conjugate gradient.
DIRICHLET_VERSION = 0;  % 0=multipliers, 1=penalization, 2=elimination
EPS_DIRICHLET_PENAL = 1E-12 ;  % parameter for treating the
                               % Dirichlet condition with penalization 

%%%%%  error computation parameters
NORM_EXACT = 0 ; % set to 0 if you don't want to calculate the norm of the exact solution
RADIUS_SPLIT_DOMAIN = 0.0

%%%%%   saving parameters                             %%%%%
ROOTFILENAME = 'crack_bilaplacian';     % Root of data files.
VTK_EXPORT = 4; % export solution to a .vtk file ?
MATLAB_EXPORT = 0;




