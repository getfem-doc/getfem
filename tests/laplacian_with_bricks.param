% Copyright (C) 2017-2020 Yves Renard.
%
% This file is a part of GetFEM++
%
% GetFEM++  is  free software;  you  can  redistribute  it  and/or modify it
% under  the  terms  of the  GNU  Lesser General Public License as published
% by  the  Free Software Foundation;  either version 3 of the License,  or
% (at your option) any later version along with the GCC Runtime Library
% Exception either version 3.1 or (at your option) any later version.
% This program  is  distributed  in  the  hope  that it will be useful,  but
% WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
% or  FITNESS  FOR  A PARTICULAR PURPOSE.  See the GNU Lesser General Public
% License and GCC Runtime Library Exception for more details.
% You  should  have received a copy of the GNU Lesser General Public License
% along  with  this program;  if not, write to the Free Software Foundation,
% Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA.
% -*- matlab -*- (enables emacs matlab mode)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% parameters for program laplacian                                        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

LX = 1.0; LY = LX; LZ = LX; 	     % sizes of the domain.
INCLINE = 0;                	     % Incline of the mesh.
FT = 0.1;                   	     % parameter for the exact solution.
N = 2;                      	     % domain in dimension N
QUAD = 0;                   	     % use quadrilaterons or not
NX = 50;                   	     % space step.
MESH_NOISED = 0;            	     % "shake" the mesh or not
DG_TERMS = 0;                        % Discontinuous Galerkin terms or not
INTERIOR_PENALTY_FACTOR = 1000;      % Interior penalty factor for DG
DIRICHLET_VERSION = 1;      	     % 0 = With Lagrange multipliers
			    	     % 1 = penalization.
DIRICHLET_COEFFICIENT = 1E10;	     % Penalization coefficient.


if (N == 1)
  FT = 5.0;
  MESH_TYPE = 'GT_PK(1,1)';          % segments
  if (DG_TERMS)
    FEM_TYPE = 'FEM_PK_DISCONTINUOUS(1,2)';          % P2 for segments
  else
    FEM_TYPE = 'FEM_PK(1,2)';          % P2 for segments
  end
%  FEM_TYPE = 'FEM_HERMITE(1)'; DATA_FEM_TYPE = 'FEM_PK(1,3)';
  INTEGRATION = 'IM_GAUSS1D(6)';     % Gauss-Legendre integration on segments
end

if (N == 2 && ~QUAD)
  FT = 10.0;
  MESH_TYPE = 'GT_PK(2,1)';          % triangles
  if (DG_TERMS)
    FEM_TYPE = 'FEM_PK_DISCONTINUOUS(2,2)';        % P2 for triangles
  else
    FEM_TYPE = 'FEM_PK(2,2)';          % P2 for triangles
  end
  %FEM_TYPE = 'FEM_REDUCED_HCT_TRIANGLE'; DATA_FEM_TYPE = 'FEM_PK(2,3)';
  %INTEGRATION = 'IM_HCT_COMPOSITE(IM_TRIANGLE(6))';
  %FEM_TYPE = 'FEM_HERMITE(2)'; DATA_FEM_TYPE = 'FEM_PK(2,2)';
  %FEM_TYPE = 'FEM_ARGYRIS'; DATA_FEM_TYPE = 'FEM_PK(2,5)';
  INTEGRATION = 'IM_TRIANGLE(6)';    % quadrature rule for polynomials up
                                     % to degree 6 on triangles
end

if (N == 2 && QUAD)
  FT = 1.0;
  if (MESH_NOISED)
    MESH_TYPE = 'GT_QK(2,1)';        % quadrilaterons
  else
    MESH_TYPE = 'GT_LINEAR_QK(2)';   % quadrilaterons (linear transformation)
  end
  if (DG_TERMS)
    FEM_TYPE = 'FEM_QK_DISCONTINUOUS(2,2)';          % Q2 for quadrilaterons
  else
    FEM_TYPE = 'FEM_QK(2,2)';          % Q2 for quadrilaterons
  end
  INTEGRATION = 'IM_GAUSS_PARALLELEPIPED(2,6)';
end

if (N == 3 && ~QUAD)
  MESH_TYPE = 'GT_PK(3,1)';          % tetrahedrons
  if (DG_TERMS)
    FEM_TYPE = 'FEM_PK_DISCONTINUOUS(3,2)';          % P1 for tetrahedrons
  else
    FEM_TYPE = 'FEM_PK(3,2)';          % P1 for tetrahedrons
  end
  INTEGRATION = 'IM_TETRAHEDRON(2)'; % quadrature rule for polynomials up
                                     % to degree 6 on tetrahedrons
end

if (N == 3 && QUAD)
  if (MESH_NOISED)
    MESH_TYPE = 'GT_QK(3,1)';        % hexahedrons
  else
    MESH_TYPE = 'GT_LINEAR_QK(3)';   % hexahedrons (linear transformation)
  end
  if (DG_TERMS)
    FEM_TYPE = 'FEM_QK_DISCONTINUOUS(3,2)';          % Q2 for hexahedrons
  else
    FEM_TYPE = 'FEM_QK(3,2)';          % Q2 for hexahedrons
  end
  INTEGRATION = 'IM_GAUSS_PARALLELEPIPED(3,6)';
end


if (N > 3)
  error('Correct the parameter file for N > 3');
end

RESIDUAL = 1E-9;     	             % residual for conjugate gradient.
ROOTFILENAME = 'laplacian'           % Root of data files.

